<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

     <!--注解缓存-->
     <cache:annotation-driven/>

     <!--Spring扫描@Compontent,@Repository,@Service,@Controller注解-->
     <context:component-scan base-package="org.wonderming.serviceimpl">
     </context:component-scan>

     <!--JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。
     CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。
     静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；
     而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。
     以下使用的是spring aop对aspectj的支持，并使用cglib实现代理
     -->
     <aop:aspectj-autoproxy proxy-target-class="true"/>

     <!--根据注释启用本地事务行为配置-->
     <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
          <property name="dataSource" ref="dataSource"/>
     </bean>

     <!--本地事务的转播行为-->
     <tx:advice id="txAdvice" transaction-manager="txManager">
          <tx:attributes>
               <tx:method name="get*" read-only="true"/>
               <tx:method name="find*" read-only="true"/>
               <tx:method name="add*" propagation="REQUIRED"/>
               <tx:method name="update*" propagation="REQUIRED"/>
               <tx:method name="delete*" propagation="REQUIRED"/>
          </tx:attributes>
     </tx:advice>

     <!--本地事务AOP-->
     <aop:config>
          <aop:advisor advice-ref="txAdvice" pointcut="execution(* org.wonderming.service..*.*(..))"/>
     </aop:config>

     <!--定义redis分布式锁-->
     <bean id="redisLockAspect" class="org.wonderming.redislock.RedisLockAspect">
          <property name="jedisClientTemplate" ref="jedisClientTemplate"/>
     </bean>

     <!--定义数据源切换Aop bean-->
     <bean id="dataSourceAspect" class="org.wonderming.datasource.DataSourceAspect">
          <!--方法前缀分类进行数据源的读写分离-->
          <property name="methodType">
               <map key-type="java.lang.String" value-type="java.lang.String">
                    <!--读数据源方法前缀-->
                    <entry key="read" value="get,find"/>
                    <!--写数据源方法前缀-->
                    <entry key="write" value="add,update,delete"/>
               </map>
          </property>
     </bean>


     <!--redis分布式锁的redis配置，默认数据库为0-->
     <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
          <constructor-arg name="host" value="${redis.host}"/>
          <constructor-arg name="port" value="${redis.port}"/>
     </bean>

     <!--封装的jedis操作类-->
     <bean id="jedisClientTemplate" class="org.wonderming.jedis.JedisClientTemplate"/>

     <!--jedis连接池-->
     <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"/>

     <!--jedis连接工厂-->
     <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
          <property name="hostName" value="${redis.host}"/>
          <property name="port" value="${redis.port}"/>
          <property name="timeout" value="${redis.timeout}"/>
          <property name="usePool" value="true"/>
          <property name="database" value="1"/>
          <property name="poolConfig" ref="jedisPoolConfig"/>
     </bean>

     <!--spring data redis 对jedis的封装-->
     <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
          <property name="connectionFactory" ref="jedisConnectionFactory"/>
     </bean>

     <!--使用spring data redis的缓存注解-->
     <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
          <constructor-arg ref="jedisTemplate"/>
     </bean>

     <!--&lt;!&ndash;jedis操作类&ndash;&gt;-->
     <!--<bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
     <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
          <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
          <!--<property name="keySerializer" ref="stringSerializer" />-->
     <!--</bean>-->

</beans>