<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>YouQu</artifactId>
        <groupId>org.wonderming</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>YouQu_web</artifactId>
    <packaging>war</packaging>
    <name>YouQu_web Maven Webapp</name>


    <dependencies>
        <dependency>
            <groupId>org.wonderming</groupId>
            <artifactId>YouQu_manager</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!-- apache最早提供的日志的门面接口。避免和具体的日志方案直接耦合。类似于JDBC 的api 接口，具体的的JDBC driver 实现由各数据库提供商实现。通过统一接口解耦，不过其内部也实现了一些简单日志方案。-->
        <!--<dependency>-->
            <!--<groupId>commons-logging</groupId>-->
            <!--<artifactId>commons-logging</artifactId>-->
        <!--</dependency>-->
        <!--模板引擎-->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring4</artifactId>
        </dependency>
        <!-- 单元测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!--Spring的IOC容器1.标识一个应用环境 2.利用BeanFactory创建Bean对象 3.保存对象关系表 4.能够捕获各种事件
         ApplicationContext的子类WebApplicationContext 顾名思义，就是为 web 准备的 Context 他可以直接访问到 ServletContext
         去除<exclusions>自带的日志门面commons-logging
     -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <!--Spring的核心组件,定义资源的访问方式-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <!--Spring的单元测试-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
        </dependency>
        <!--Spring提供对AspectJ的支持,面向切面的框架是SpringAOP的实现
            增强处理：
            @Before: 前置通知, 在方法执行之前执行
            @After: 后置通知, 在方法执行之后执行
            @AfterRunning: 返回通知, 在方法返回结果之后执行
            @AfterThrowing: 异常通知, 在方法抛出异常之后
            @Around: 环绕通知, 围绕着方法执行
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <!--Spring对mvc的支持，包括restful协议-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <!--Spring context的扩展支持，用于MVC方面。-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!--系统日志门面-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
        </dependency>
        <!--底层logback日志门面-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <!--logback核心-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <!--swagger API-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>
        <!-- Jackson Json处理工具包 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>YouQu_web</finalName>
        <filters>
            <filter>${project.basedir}/../src/main/resources/application-${profiles.active}.properties</filter>
        </filters>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>


</project>
